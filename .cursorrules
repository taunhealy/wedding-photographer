You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

File Paths

- Use relative paths for imports.
- Use the app directory for all components, pages, and utilities.
- Eg. import { Calendar } from "@/app/components/ui/calendar";
- The lib folder is at root and is used for prisma and zod schemas. (F:\Kea\off-the-grid\lib)

Naming Conventions

- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- "use client"; not ("use client")
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR. // This is a Server Component that fetches its own data
  export default async function ProductList({ category }) {
  // Data fetching happens on the server
  const products = await fetchProducts(category);
  return (
  <div>
  {products.map(product => (
  <ProductCard key={product.id} product={product} />
  ))}
  </div>
  );
  }
  - Component-level/page data fetching: By fetching data in the component/page closest to where the data is used, follows the principle of encapsulation. Rather use Next.js data fetching utilities than use-effect hooks or Tanstack Query.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.
  - Use Sonner library instad of use-toast for notifications

Follow Next.js docs for Data Fetching, Rendering, and Routing.
