generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String?         @unique
  name            String?
  password        String?
  role            UserRole        @default(CLIENT)
  phone           String?
  address         String?
  image           String?
  profileImage    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  emailVerified   DateTime?
  accounts        Account[]
  auditLogs       AuditLog[]
  bookings        Booking[]
  clientProfile   ClientProfile?
  reviews         Review[]
  sessions        Session[]
  waitlistEntries WaitlistEntry[]
}

model Package {
  id           String            @id @default(cuid())
  name         String
  description  String
  duration     Int
  price        Decimal           @db.Money
  images       String[]
  highlights   String[]
  inclusions   String[]
  exclusions   String[]
  published    Boolean           @default(false)
  categoryId   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deleted      Boolean           @default(false)
  deletedAt    DateTime?
  metadata     Json?
  category     PackageCategory   @relation(fields: [categoryId], references: [id])
  schedules    PackageSchedule[]
  paypalOrders PaypalOrder[]
  tags         Tag[]             @relation("PackageTags")

  @@index([categoryId])
}

model PackageSchedule {
  id              String          @id @default(cuid())
  packageId       String
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  price           Decimal         @db.Decimal(10, 2)
  available       Boolean         @default(true)
  status          String          @default("OPEN")
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  metadata        Json?
  bookings        Booking[]
  package         Package         @relation(fields: [packageId], references: [id], onDelete: Cascade)
  paypalOrders    PaypalOrder[]
  waitlistEntries WaitlistEntry[]
}

model Booking {
  id                String          @id @default(cuid())
  userId            String
  packageScheduleId String
  bookingDate       DateTime        @default(now())
  status            String          @default("PENDING")
  totalAmount       Decimal         @db.Decimal(10, 2)
  paidAmount        Decimal         @default(0) @db.Decimal(10, 2)
  specialRequests   String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  metadata          Json?
  packageSchedule   PackageSchedule @relation(fields: [packageScheduleId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  eventDetails      EventDetails?
  payments          Payment[]
  paymentPlan       PaymentPlan?
  review            Review?
}

model EventDetails {
  id                      String   @id @default(cuid())
  bookingId               String   @unique
  eventDate               DateTime
  venueName               String
  venueAddress            String
  eventType               String   @default("WEDDING")
  numberOfGuests          Int?
  additionalPhotographers Boolean  @default(false)
  timeline                Json?
  contactPersonName       String?
  contactPersonPhone      String?
  booking                 Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String       @id @default(cuid())
  amount        Decimal      @db.Decimal(10, 2)
  paymentMethod String
  status        String
  transactionId String?
  bookingId     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  paymentPlanId String?
  booking       Booking      @relation(fields: [bookingId], references: [id])
  paymentPlan   PaymentPlan? @relation(fields: [paymentPlanId], references: [id])

  @@index([transactionId])
  @@index([bookingId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  bookingId String   @unique
  rating    Int
  comment   String?
  highlight String?
  photos    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  booking   Booking  @relation(fields: [bookingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  details    Json?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model ClientProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  anniversaryDate DateTime?
  preferredStyle  String?
  notes           String?
  metadata        Json?
  user            User      @relation(fields: [userId], references: [id])
}

model PaymentPlan {
  id           String    @id @default(cuid())
  bookingId    String    @unique
  totalAmount  Decimal   @db.Decimal(10, 2)
  installments Int
  frequency    String
  payments     Payment[]
  booking      Booking   @relation(fields: [bookingId], references: [id])
}

model WaitlistEntry {
  id                String          @id @default(cuid())
  userId            String
  packageScheduleId String
  requestDate       DateTime        @default(now())
  notes             String?
  status            String          @default("WAITING")
  packageSchedule   PackageSchedule @relation(fields: [packageScheduleId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  packages Package[] @relation("PackageTags")
}

model PaypalOrder {
  id          String            @id @default(cuid())
  orderId     String            @unique
  status      PaypalOrderStatus
  packageId   String
  scheduleId  String
  amount      Decimal           @db.Decimal(10, 2)
  contactInfo Json
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  package     Package           @relation(fields: [packageId], references: [id], onDelete: Cascade)
  schedule    PackageSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([packageId])
  @@index([scheduleId])
}

model WorkItem {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String
  content     String
  images      String[]
  coverImage  String
  published   Boolean      @default(false)
  featured    Boolean      @default(false)
  date        DateTime
  location    String?
  couple      String?
  venue       String?
  categoryId  String
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  products    Product[]
  category    WorkCategory @relation(fields: [categoryId], references: [id])
  tags        WorkTag[]    @relation("WorkItemTags")

  @@index([categoryId])
  @@index([published])
  @@index([featured])
}

model WorkCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workItems   WorkItem[]

  @@index([order])
}

model WorkTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  workItems WorkItem[] @relation("WorkItemTags")
}

model Availability {
  id          String   @id @default(cuid())
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, startTime, endTime])
}

model Product {
  id                String           @id @default(cuid())
  name              String
  description       String
  basePrice         Decimal          @db.Money
  platformFee       Decimal          @db.Money
  photographerPrice Decimal          @db.Money
  finalPrice        Decimal          @db.Money
  type              ProductType
  status            ProductStatus    @default(ACTIVE)
  workItemId        String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  workItem          WorkItem         @relation(fields: [workItemId], references: [id])
  variants          ProductVariant[]

  @@index([workItemId])
  @@index([type])
  @@index([status])
}

model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  name       String
  sku        String   @unique
  price      Decimal  @db.Money
  dimensions String?
  material   String?
  inStock    Boolean  @default(true)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model PlatformSettings {
  id             String   @id @default(cuid())
  commissionRate Decimal  @db.Decimal(5, 2)
  minMarkup      Decimal  @db.Decimal(5, 2)
  maxMarkup      Decimal  @db.Decimal(5, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PackageCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  packages    Package[]

  @@index([order])
}

enum UserRole {
  CLIENT
  ADMIN
  STAFF
}

enum PaypalOrderStatus {
  CREATED
  APPROVED
  COMPLETED
  CANCELLED
}

enum ProductType {
  PHOTO_PRINT
  PHOTO_ALBUM
  FRAME
  CANVAS
  DIGITAL_DOWNLOAD
}

enum ProductStatus {
  ACTIVE
  DRAFT
  DISCONTINUED
}
