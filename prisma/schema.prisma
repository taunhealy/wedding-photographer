// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts (clients, admin)
model User {
  id                String    @id @default(cuid())
  email             String?   @unique
  name              String?
  emailVerified     DateTime?
  password          String?   // Make password optional
  role              UserRole  @default(CLIENT)
  phone             String?
  address           String?
  image             String?   // NextAuth image field
  profileImage      String?   // URL to image
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  bookings          Booking[]
  reviews           Review[]
  accounts          Account[]
  sessions          Session[]
  clientProfile     ClientProfile?
  auditLogs         AuditLog[]
  waitlistEntries   WaitlistEntry[]
}

enum UserRole {
  CLIENT
  ADMIN
  STAFF
}

// Photography packages
model Package {
  id              String    @id @default(cuid())
  name            String
  description     String    @db.Text
  duration        Int       // Hours
  price           Decimal   @db.Money
  images          String[]  // Array of image URLs
  highlights      String[]
  inclusions      String[]
  exclusions      String[]
  published       Boolean   @default(false)
  categoryId      String
  category        PackageCategory @relation(fields: [categoryId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  schedules       PackageSchedule[]
  deleted         Boolean   @default(false)
  deletedAt       DateTime?
  
  tags            Tag[]         @relation("PackageTags")
  metadata        Json?     // Store additional package-specific data
  paypalOrders    PaypalOrder[]

  @@index([categoryId])
}

// Available package dates
model PackageSchedule {
  id              String           @id @default(cuid())
  packageId       String
  package         Package          @relation(fields: [packageId], references: [id], onDelete: Cascade)
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  price           Decimal          @db.Decimal(10, 2)
  available       Boolean          @default(true)
  status          String           @default("OPEN") // OPEN, BOOKED, UNAVAILABLE
  notes           String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookings        Booking[]
  waitlistEntries WaitlistEntry[]
  // Custom fields
  metadata        Json?            // Store additional schedule-specific data
  paypalOrders    PaypalOrder[]
}

// Client bookings
model Booking {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  packageScheduleId String
  packageSchedule   PackageSchedule   @relation(fields: [packageScheduleId], references: [id])
  bookingDate       DateTime          @default(now())
  status            String            @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED
  totalAmount       Decimal           @db.Decimal(10, 2)
  paidAmount        Decimal           @db.Decimal(10, 2) @default(0)
  eventDetails      EventDetails?
  specialRequests   String?           @db.Text
  payments          Payment[]
  review            Review?
  paymentPlan       PaymentPlan?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  // Custom fields
  metadata          Json?             // Store additional booking-specific data
}

// Event details for weddings
model EventDetails {
  id                String    @id @default(cuid())
  bookingId         String    @unique
  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  eventDate         DateTime
  venueName         String
  venueAddress      String
  eventType         String    @default("WEDDING") // WEDDING, ENGAGEMENT, PORTRAIT, etc.
  numberOfGuests    Int?
  additionalPhotographers Boolean @default(false)
  timeline          Json?     // Detailed event timeline
  contactPersonName String?
  contactPersonPhone String?
}

// Payment records
model Payment {
  id            String   @id @default(cuid())
  amount        Decimal  @db.Decimal(10, 2)
  paymentMethod String   
  status        String   
  transactionId String?  
  booking       Booking  @relation(fields: [bookingId], references: [id])
  bookingId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paymentPlan   PaymentPlan? @relation(fields: [paymentPlanId], references: [id])
  paymentPlanId String?

  @@index([transactionId])
  @@index([bookingId])
}

// Client reviews
model Review {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  bookingId     String     @unique
  booking       Booking    @relation(fields: [bookingId], references: [id])
  rating        Int        // 1-5 stars
  comment       String?    @db.Text
  highlight     String?
  photos        String[]   // URLs to photos
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  published     Boolean    @default(false)
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  action      String      // CREATE, UPDATE, DELETE
  entityType  String      // Package, Booking, etc.
  entityId    String
  details     Json?       // What changed
  timestamp   DateTime    @default(now())
}

// Client profile
model ClientProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id])
  anniversaryDate    DateTime?
  preferredStyle     String?   // Documentary, Traditional, Artistic
  notes              String?   @db.Text
  // Custom fields
  metadata           Json?     // Store additional client-specific data
}

model PaymentPlan {
  id            String    @id @default(cuid())
  bookingId     String    @unique  // Make unique to ensure one plan per booking
  booking       Booking   @relation(fields: [bookingId], references: [id])
  totalAmount   Decimal   @db.Decimal(10, 2)
  installments  Int
  frequency     String    // WEEKLY, MONTHLY
  payments      Payment[]
}

model WaitlistEntry {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  packageScheduleId String
  packageSchedule   PackageSchedule @relation(fields: [packageScheduleId], references: [id])
  requestDate       DateTime  @default(now())
  notes             String?
  status            String    @default("WAITING") // WAITING, NOTIFIED, BOOKED
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  packages    Package[] @relation("PackageTags")
}

enum PaypalOrderStatus {
  CREATED
  APPROVED
  COMPLETED
  CANCELLED
}

model PaypalOrder {
  id          String          @id @default(cuid())
  orderId     String          @unique
  status      PaypalOrderStatus
  package     Package         @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId   String
  schedule    PackageSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId  String
  amount      Decimal         @db.Decimal(10, 2)
  contactInfo Json
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([orderId])
  @@index([packageId])
  @@index([scheduleId])
}

// Work Items (Portfolio pieces)
model WorkItem {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String    @db.Text
  content     String    @db.Text  // Rich text content
  images      String[]  // Array of image URLs
  coverImage  String    // Main portfolio image
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  date        DateTime  // Date of the event/shoot
  location    String?
  couple      String?   // Names of the couple
  venue       String?
  
  categoryId  String
  category    WorkCategory @relation(fields: [categoryId], references: [id])
  
  tags        WorkTag[]    @relation("WorkItemTags")
  
  metadata    Json?     // Additional metadata (camera settings, etc.)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] // Add this relation

  @@index([categoryId])
  @@index([published])
  @@index([featured])
}

// Work Categories (Wedding, Engagement, etc.)
model WorkCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?    @db.Text
  workItems   WorkItem[]
  order       Int        @default(0) // For custom ordering in the UI
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([order])
}

// Tags for work items
model WorkTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  workItems WorkItem[] @relation("WorkItemTags")
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Availability calendar for the photographer
model Availability {
  id          String   @id @default(cuid())
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, startTime, endTime])
}

// New e-commerce related models
model Product {
  id              String    @id @default(cuid())
  name            String
  description     String    @db.Text
  basePrice       Decimal   @db.Money     // Your wholesale/base price
  platformFee     Decimal   @db.Money     // Your commission
  photographerPrice Decimal @db.Money     // Price set by photographer
  finalPrice      Decimal   @db.Money     // Final customer price
  type            ProductType
  status          ProductStatus @default(ACTIVE)
  workItem        WorkItem  @relation(fields: [workItemId], references: [id])
  workItemId      String
  variants        ProductVariant[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([workItemId])
  @@index([type])
  @@index([status])
}

model ProductVariant {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String    // e.g., "8x10 Framed", "12x16 Canvas"
  sku         String    @unique
  price       Decimal   @db.Money
  dimensions  String?   // e.g., "8x10", "12x16"
  material    String?   // e.g., "Premium Photo Paper", "Canvas"
  inStock     Boolean   @default(true)
  metadata    Json?     // Additional variant-specific details
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
}

enum ProductType {
  PHOTO_PRINT
  PHOTO_ALBUM
  FRAME
  CANVAS
  DIGITAL_DOWNLOAD
}

enum ProductStatus {
  ACTIVE
  DRAFT
  DISCONTINUED
}

model PlatformSettings {
  id              String    @id @default(cuid())
  commissionRate  Decimal   @db.Decimal(5,2) // Platform commission percentage
  minMarkup       Decimal   @db.Decimal(5,2) // Minimum markup allowed
  maxMarkup       Decimal   @db.Decimal(5,2) // Maximum markup allowed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PackageCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  packages    Package[]
  order       Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([order])
}
